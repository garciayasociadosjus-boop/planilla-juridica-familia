<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fondo de Reparo - Estudio Jurídico</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            min-height: 100vh;
        }
        
        .container {
            max-width: 900px;
            margin: 0 auto;
            background-color: white;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        }
        
        h1 {
            text-align: center;
            color: #1a237e;
            margin-bottom: 30px;
            font-size: 2.2em;
            text-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        th {
            background: linear-gradient(135deg, #1a237e 0%, #0d47a1 100%);
            color: white;
            padding: 12px 8px;
            text-align: center;
            border: 1px solid #0d47a1;
            font-weight: bold;
            text-shadow: 0 1px 2px rgba(0,0,0,0.2);
        }
        
        td {
            padding: 10px 8px;
            border: 1px solid #ddd;
            text-align: center;
        }
        
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        
        tr:hover {
            background-color: #f0f8ff;
        }
        
        .mes-column {
            text-align: left;
            font-weight: bold;
        }
        
        .input-field {
            width: 100%;
            padding: 5px;
            border: 1px solid #ccc;
            border-radius: 4px;
            text-align: right;
            font-size: 14px;
        }
        
        .calculated-field {
            background-color: #f8f8f8;
            color: #333;
            font-weight: bold;
            min-height: 20px;
            padding: 8px;
            border-radius: 4px;
        }
        
        .liberable {
            color: #388e3c; /* Verde */
        }
        .no-liberable {
            color: #d32f2f; /* Rojo */
        }
        
        .year-section {
            margin: 30px 0;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            padding: 15px;
        }
        
        .year-title {
            background-color: #1a237e;
            color: white;
            padding: 10px;
            margin: -15px -15px 15px -15px;
            border-radius: 6px 6px 0 0;
            font-size: 18px;
            font-weight: bold;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .controls {
            text-align: center;
            margin-top: 30px;
        }
        .controls button, .delete-year-btn {
            background-color: #1a237e;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin: 0 5px;
            font-size: 14px;
            transition: background-color 0.3s;
        }
        .controls button:hover, .delete-year-btn:hover {
            background-color: #0d47a1;
        }
        .delete-year-btn {
            padding: 6px 12px;
            font-size: 12px;
            background-color: #c62828;
        }
         .delete-year-btn:hover {
            background-color: #b71c1c;
        }

    </style>
</head>
<body>
    <div class="container">
        <h1>FONDO DE REPARO</h1>
        
        <div id="years-container">
            </div>

        <div class="controls">
            <button onclick="addMonth()">Agregar Mes</button>
            <button onclick="addYear()">Agregar Año</button>
            <button onclick="exportData()">Exportar a CSV</button>
        </div>
    </div>

    <script>
        const meses = [
            'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
            'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'
        ];
        
        let yearsData = [
            {
                year: 2025,
                months: [
                    { mes: 'Enero', ingreso: 0, gasto: 0, porcentaje: 7 },
                    { mes: 'Febrero', ingreso: 0, gasto: 0, porcentaje: 7 },
                    { mes: 'Marzo', ingreso: 0, gasto: 0, porcentaje: 7 },
                    { mes: 'Abril', ingreso: 0, gasto: 0, porcentaje: 7 },
                    { mes: 'Mayo', ingreso: 44077, gasto: 0, porcentaje: 7 },
                    { mes: 'Junio', ingreso: 345291, gasto: 0, porcentaje: 7 },
                    { mes: 'Julio', ingreso: 237193, gasto: 2500, porcentaje: 7 },
                    { mes: 'Agosto', ingreso: 750765, gasto: 68000, porcentaje: 7 },
                    { mes: 'Septiembre', ingreso: 0, gasto: 68000, porcentaje: 7 },
                    { mes: 'Octubre', ingreso: 0, gasto: 68000, porcentaje: 7 },
                    { mes: 'Noviembre', ingreso: 44077, gasto: 68000, porcentaje: 7 },
                    { mes: 'Diciembre', ingreso: 345291, gasto: 68000, porcentaje: 7 }
                ]
            },
            {
                year: 2026,
                months: [
                    { mes: 'Enero', ingreso: 237193, gasto: 68000, porcentaje: 7 },
                    { mes: 'Febrero', ingreso: 750765, gasto: 68000, porcentaje: 7 }
                ]
            }
        ];

        let allData = [];

        function formatNumber(num) {
            return new Intl.NumberFormat('es-AR', {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            }).format(num);
        }

        function calculateRetenido(ingreso, porcentaje) {
            return ingreso * (porcentaje / 100);
        }

        function calculateFondoAcumulado(prevFondo, retenido, gasto) {
            return prevFondo + retenido - gasto;
        }

        function getFondoClass(fondo) {
            return fondo < 0 ? 'no-liberable' : 'liberable';
        }

        function deleteYear(yearIndex) {
            if (yearsData.length <= 1) {
                alert('Debe mantener al menos un año.');
                return;
            }
            if (confirm(`¿Está seguro de que desea eliminar el año ${yearsData[yearIndex].year}?`)) {
                yearsData.splice(yearIndex, 1);
                recalculateAll();
                renderTables();
            }
        }

        function recalculateAll() {
            allData = [];
            let fondoAcumulado = 0;
            yearsData.forEach(yearData => {
                yearData.months.forEach(monthData => {
                    const retenido = calculateRetenido(monthData.ingreso, monthData.porcentaje);
                    fondoAcumulado = calculateFondoAcumulado(fondoAcumulado, retenido, monthData.gasto);
                    const dataPoint = {
                        year: yearData.year, mes: monthData.mes, ingreso: monthData.ingreso,
                        porcentaje: monthData.porcentaje, retenido: retenido, gasto: monthData.gasto,
                        fondoAcumulado: fondoAcumulado
                    };
                    allData.push(dataPoint);
                });
            });
        }

        function getGlobalIndex(yearIndex, monthIndex) {
            let index = 0;
            for (let i = 0; i < yearIndex; i++) {
                index += yearsData[i].months.length;
            }
            return index + monthIndex;
        }

        function createTableRow(yearIndex, monthIndex) {
            const globalIndex = getGlobalIndex(yearIndex, monthIndex);
            const item = allData[globalIndex];
            if (!item) return '';

            const fondoClass = getFondoClass(item.fondoAcumulado);

            return `
                <tr>
                    <td class="mes-column">${item.mes}</td>
                    <td><input type="number" class="input-field" value="${item.ingreso}" onchange="updateIngreso(${yearIndex}, ${monthIndex}, this.value)" step="0.01"></td>
                    <td>
                        <input type="number" class="input-field" value="${item.porcentaje}" onchange="updatePorcentaje(${yearIndex}, ${monthIndex}, this.value)" step="0.1" min="0" max="100" style="width: 60px;">
                        <span style="font-size: 12px;">%</span>
                    </td>
                    <td><div class="calculated-field">${formatNumber(item.retenido)}</div></td>
                    <td><input type="number" class="input-field" value="${item.gasto}" onchange="updateGasto(${yearIndex}, ${monthIndex}, this.value)" step="0.01"></td>
                    <td><div class="calculated-field ${fondoClass}">${formatNumber(item.fondoAcumulado)}</div></td>
                </tr>
            `;
        }

        function updateIngreso(yearIndex, monthIndex, value) {
            yearsData[yearIndex].months[monthIndex].ingreso = parseFloat(value) || 0;
            recalculateAll(); renderTables();
        }

        function updateGasto(yearIndex, monthIndex, value) {
            yearsData[yearIndex].months[monthIndex].gasto = parseFloat(value) || 0;
            recalculateAll(); renderTables();
        }

        function updatePorcentaje(yearIndex, monthIndex, value) {
            yearsData[yearIndex].months[monthIndex].porcentaje = parseFloat(value) || 7;
            recalculateAll(); renderTables();
        }

        function renderTables() {
            const container = document.getElementById('years-container');
            container.innerHTML = '';
            yearsData.forEach((yearData, yearIndex) => {
                const yearSection = document.createElement('div');
                yearSection.className = 'year-section';
                yearSection.innerHTML = `
                    <div class="year-title">
                        <span>${yearData.year}</span>
                        ${yearsData.length > 1 ? `<button class="delete-year-btn" onclick="deleteYear(${yearIndex})">Eliminar Año</button>` : ''}
                    </div>
                    <table>
                        <thead>
                            <tr>
                                <th style="width: 15%;">Mes</th>
                                <th style="width: 20%;">Ingreso</th>
                                <th style="width: 10%;">% Ret.</th>
                                <th style="width: 20%;">Retenido</th>
                                <th style="width: 20%;">Gasto</th>
                                <th style="width: 25%;">Fondo Acumulado</th>
                            </tr>
                        </thead>
                        <tbody id="year${yearIndex}-data"></tbody>
                    </table>`;
                container.appendChild(yearSection);
                const tbody = document.getElementById(`year${yearIndex}-data`);
                yearData.months.forEach((month, monthIndex) => {
                    tbody.innerHTML += createTableRow(yearIndex, monthIndex);
                });
            });
        }

        function addMonth() {
            const lastYear = yearsData[yearsData.length - 1];
            if (lastYear.months.length < 12) {
                lastYear.months.push({ mes: meses[lastYear.months.length], ingreso: 0, gasto: 0, porcentaje: 7 });
                recalculateAll(); renderTables();
            } else {
                alert('Este año ya tiene 12 meses. Usa "Agregar Año" para continuar.');
            }
        }

        function addYear() {
            const newYear = yearsData[yearsData.length - 1].year + 1;
            yearsData.push({ year: newYear, months: [{ mes: 'Enero', ingreso: 0, gasto: 0, porcentaje: 7 }] });
            recalculateAll(); renderTables();
        }

        function exportData() {
            const csvContent = [
                ['Año', 'Mes', 'Ingreso', '% Retención', 'Retenido', 'Gasto', 'Fondo Acumulado'],
                ...allData.map(item => [
                    item.year, item.mes, item.ingreso, item.porcentaje,
                    item.retenido.toFixed(2), item.gasto, item.fondoAcumulado.toFixed(2)
                ])
            ].map(row => row.join(',')).join('\n');
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `fondo_reparo_${new Date().getFullYear()}.csv`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
        }

        document.addEventListener('DOMContentLoaded', function() {
            recalculateAll();
            renderTables();
        });
    </script>
</body>
</html>
